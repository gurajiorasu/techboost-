<?php
//関数 y=f(x) 関数は、あるxという値を入れるとyという結果が出てくるものでした。


// 1〜10 までを足した値を返す関数(逆に1から10までの値しか出力してくれない)
function sum(){

    // $result は結果を保存する変数
    $result = 0;

    // $i は1からはじまり $max より大きくなるまでループする。I++はiの値を1づつ加算しながら。
    for($i = 1; $i <= 10; $i++){ 

        // $result に　$i を順番に足していく
        $result += $i;
    }
    return $result; // $result を結果として返す
}

// 関数を実行する
echo sum();
//55と表示されました。1+2+3+4+5+6+7+8+9+10=55

/*厳密な関数の定義
function 関数名(仮引数) {
  実行する処理
}
function のあとに、自分が作りたい関数の(機能がわかるような)名前を書きます。そのあとに(仮引数) 
を書き、{} の間に関数に実行させたい処理を記述します。
上記の関数はこの関数は、1から10までを足して出力してくれる関数ですが、逆に言えば1から10までの値しか出力してくれず、あまりつかいどころが無いわけです。*/

/*sum関数に仮引数というものをもたせることでsum関数を高機能な関数にしてみよう。
仮引数を使うことで、1〜10以外の数字の足し算ができるようになりました。
sum関数には仮引数の$maxを設定していたのでいくつの値までを足すかを教えてあげるために、実行するときに$maxの値・echo sum(100);などにする.
sum2は上でもsum使ってたので任意で付けた*/
function sum2($max) {
    $result = 0;

    // $i は1から始まり、$max より大きくなるまでループする
    for($i = 1; $i <= $max; $i++ ){
        $result += $i;
    }
    return $result; //この return のあとに書かれた$resultが、関数が実行された結果として出力されます。
    
}
  
// 関数を実行、5050と出力
echo sum2(100);
/*　$maxのように、関数を定義するときに「関数にこんな値を渡してあげたい」というときに仮に渡す変数を 仮引数 といいます。
関数の中だけで使用することができ,sum(100)の100のように、実行するときに実際に渡す値のことを 引数 といいます*/

//◎PHP のビルトイン関数（PHPには、私達がすべてを一から実装しなくても良いように、始めから用意されている関数がたくさんあります。）

//strlen : 文字の長さを取得する
$string = "ABCDEF";
echo strlen($string);
//=> 6 と表示される

//str_replace : 文字列を置換する
$string = "I love Ruby!";

// Ruby という文字列を　PHP に置換する
$new_string = str_replace("Ruby", "PHP", $string);

echo $new_string;
//=> I love PHP!と表示。Rubyからphpに置き換えた

//count : 配列の要素の個数を取得する
$array = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
echo count($array);
//=> 10 と表示される

//asort, arsort : 配列をソート（並び替え）する
$array = array(2,5,9,7,3,1,8,6,4);

// 配列を昇順（小さい順）にソートする
asort($array);
// print_rで表示する
print_r($array);
//=> Array
//=> (
//=>     [5] => 1
//=>     [0] => 2
//=>     [4] => 3
//=>     [8] => 4
//=>     [1] => 5
//=>     [7] => 6
//=>     [3] => 7
//=>     [6] => 8
//=>     [2] => 9
//=> )
//=> と表示される。

// $array を降順(大きい順)にソートする
arsort($array);
// print_rで表示する
print_r($array);

//=> Array
//=> (
//=>     [2] => 9
//=>     [6] => 8
//=>     [3] => 7
//=>     [7] => 6
//=>     [1] => 5
//=>     [8] => 4
//=>     [4] => 3
//=>     [0] => 2
//=>     [5] => 1
//=> )
//=> と表示される






?>
