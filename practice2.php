<?php
/*Linuxコマンド関係(ターミナルに打つ)
・pwd 現在のフォルダ(ディレクトリとも呼びます)を調べる。・「mkdir 作成したいディレクトリ名」でフォルダ作成。
・「touch ファイル名」でファイル作成。
・「cd フォルダ名」は移動 、cd ~/environmentは　～はホームディレクトリを意味しホームディレクトリ下のenvironmentディレクトリへ移動する。
・lsはフォルダの中身を表示。
・「rm -r 削除するファイル名又はフォルダ名」ディレクトリの削除する。
・「コマンド名 -h」ヘルプオプションをつけることで、そのコマンドの使い方を見ることができます。例 cd -h など
・「cat コマンド名」ファイルの中身閲覧(ターミナルに全文章表示)できる　例 cat practice.php
・「ls -l」でファイルの詳細も表示する（左からファイルタイプ、パーミション、ハードリンクの数、オーナー名、グループ名、バイトサイズ、
タイムスタンプ、ファイル名の順になる）
・「echo 表示するもの」echoは画面に文字列や数値、変数を表示するLinuxコマンド*/

//phpでは、変数名は最初に$記号をつけて、その後に利用可能な文字を指定します。変数には自由に名前をつけることができます。

//◎if文、else文、else if文による条件分岐

$height = 160;
// もし $height が 150 未満の数値なら、 ifのあとの { } の中のコードが実行される。
// それ以外なら、 else のあとの　｛ ｝ の中のコードが実行される

if ($height < 150) {
  echo "150cm 未満の方はご乗車できません。";
} else {
  echo "ご乗車になれます。";
}
//=> "ご乗車になれます。" が表示される。


$height = 230;
// もし $height が 150 未満の数値なら、 ifのあとの { } の中のコードが実行される
// もし $height が 200 以上の数値なら、 else ifのあとの{ }の中のコードが実行される
// それ以外なら、 else のあとの　｛ ｝ の中のコードが実行される
if ($height < 150) {
  echo "150cm 未満の方はご乗車できません。";
} else if ($height >= 200){
  echo "200cm 以上の方はご乗車できません。";
}else {
  echo "ご乗車になれますよ。";
}
//=> "200cm 以上の方はご乗車できません。" が表示される。

//◎switch による複数条件分岐、switch 文 を使用するとif 文と同じように条件分岐でコードを書く量が少なくて済む場合がある
/* $weekdayが月曜だったら「可燃ごみの日です。」、水曜だったら「資源ごみの日です。」それ以外だったら
「回収はありません。」と表示。*/
$weekday = "月曜";
switch ($weekday) {
  case "月曜":
    echo "可燃ごみの日です。";
    break;
  case "水曜":
    echo "資源ごみの日です。";
    break;
  default:
    echo "回収はありません。";
    break;
}
//=> 可燃ごみの日です。 が表示される。
/*case 文のあとの処理の終わりには必ず、break文を入れてください。break文を記述しないと、
全ての条件が実行されてしまいますので注意しましょう。*/

//ただしbreak 文を使わないことで得られるメリットもある。以下はbreakを使わない例！
/*$weekday が月曜か木曜だったら「可燃ごみの日ですね。」、 水曜だったら「資源ごみの日ですね。」
それ以外だったら「回収はありませんね。」と表示したい*/
$week = "木曜";
switch ($week) {
  case "月曜":
  case "木曜":
    echo "可燃ごみの日ですね。";
  case "水曜":
    echo "資源ごみの日ですね。";
  default:
    echo "回収はありませんね。";
  
}
//=> 可燃ごみの日ですね。
/*例えば、$weekdayが月曜か木曜だったときに「可燃ごみの日です。」と表示したい場合は、例のように書くことができます。
caseはいくつでも連続して書くことができますので、覚えておきましょう。*/

// for による繰り返し処理
//for ( カウンター変数の初期化; ループを続ける条件; 条件の変化指定 ) {要素一つに対して実行したい処理}
for($i = 0; $i < 10; $i++){
  echo $i;
}
//=> 0123456789 が表示される。
/*1つ目の$iに0を代入しています。2つ目は条件として、$iが10未満と指定されています。3つ目には、$iに1を足しています。
これは「$iは0から始まり、$iが10未満になるまで$iに1足し続ける」と解釈する。
$iが条件を満たしている間、次の{}の中が実行されます。$iが条件から外れたとき、つまり$iが10になったとき、
{}は実行されずに繰り返し処理は終了します。*/

//for 文を使うと、配列の要素をすべて処理することができ、配列の最初の要素は0で、配列の要素の数は count() という関数で知ることができます。

# 配列の全ての要素を出力
$fruits = array("apple", "orange", "lemon");

echo count($fruits);
//=> 3 と表示される。

for ($i = 0; $i < count($fruits); $i++) {
  echo "要素は" . $fruits[$i];
  echo "\n"; //\n改行
}
//=> 要素はapple
//=> 要素はorange
//=> 要素はlemon
//=> と表示される

//foreach による順次処理
//foreach 文は配列の要素を順番に処理するための構文です。配列の要素を先頭から順番に一時変数に代入し、指定した処理を実行します。
/*使い方は
foreach (配列 as 一時変数) {
  要素一つに対して実行したい処理
}
でforeach を使うことで、for文のように $i を使用することなく配列の全ての要素を一度に処理することができます。
*/

$animals = array("dog", "cat", "panda");
// $animals から一つずつ要素を取り出して、$animal に代入される

foreach($animals as $animal){
  echo "要素は" . $animal;
  echo "\n"; // \n改行
}

//=> 要素はdog
//=> 要素はcat
//=> 要素はpanda
//=> と表示される



?>